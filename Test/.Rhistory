test1 <- results[1] == results[2]
test2 <- results[1] == results[3]
exiter <- test1 & test2
}
coin <- c("heads", "tails")
results <- c(1,2,3)
attempt = 0
exiter = FALSE
while(exiter == FALSE){
toss <- sample(coin,size = 1, replace = F)
results[attempt%%3+1] <-  toss
attempt = attempt+1
print(toss)
test1 <- results[1] == results[2]
test2 <- results[1] == results[3]
exiter <- test1 & test2
}
coin <- c("heads", "tails")
results <- c(1,2,3)
attempt = 0
exiter = FALSE
while(exiter == FALSE){
toss <- sample(coin,size = 1, replace = F)
results[attempt%%3+1] <-  toss
attempt = attempt+1
print(toss)
test1 <- results[1] == results[2]
test2 <- results[1] == results[3]
exiter <- test1 & test2
}
n = 1
result = 0
while(epsilon >= .001){
result <- result + 1/(2^n)
epsilon <- 1/(2^n) - 1/(2^(n-1))
n <- n+1
}
n = 1
result = 0
epsilon = 100000
while(epsilon >= .001){
result <- result + 1/(2^n)
epsilon <- 1/(2^n) - 1/(2^(n-1))
n <- n+1
}
n = 1
result = 0
epsilon = 100000
while(epsilon >= .001){
result <- result + 1/(2^n)
epsilon <- 1/(2^n) - 1/(2^(n-1))
n <- n+1
print(result)
}
n = 1
result = 0
result.last = 1
delta = 100000
while(delta >= .001){
result <- result + 1/(2^n)
delta <- abs(result - result.last)
result.last <- result
n <- n+1
print(result)
}
print(delta)
load("C:/Users/jordo/Downloads/1976-2020-president.RData")
View(x)
View(x)
load("C:/Users/jordo/Downloads/shor mccarty 1993-2018 individual legislator data July 2020 release.RData")
View(table)
View(table)
load("C:/Users/jordo/Downloads/dime_recipients_all_1979_2014.rdata")
View(cands.all)
View(cands.all)
state.sen.cands <- cands.all[cands.all$seat==state:senate]
state.sen.cands <- cands.all[cands.all$seat==statesenate]
# Load library dependencies
library(dplyr)
library(tidyr)
library(readr)
# Define path to the data
dataURL <- 'https://jmontgomery.github.io/PDS/Datasets/president_primary_polls_feb2020.csv'
# Load the data
primaryPolls<-read_csv(dataURL)
# Format the date
primaryPolls$start_date<-as.Date(primaryPolls$start_date, "%m/%d/%y")
primaryPolls$start_date
max(primaryPolls$start_date)
smin(primaryPolls$start_date)
min(primaryPolls$start_date)
primaryPolls %>%
filter(start_date > "2019-12-08")
primaryPolls %>%
filter(start_date > "2019-12-08")
primaryPolls %>%
filter(start_date > "2019-12-08") %>%
select(start_date,pct,state,candidate) %>%
primaryPolls %>% mutate(proportion <- pct/100)
primaryPolls %>%
filter(start_date > "2019-12-08") %>%
select(start_date,pct,state,candidate) %>%
primaryPolls %>% mutate(proportion <- pct/100)
primaryPolls %>%
filter(start_date > "2019-12-08") %>%
select(start_date,pct,state,candidate) %>%
primaryPolls %>% mutate(proportion <- pct/100)
primaryPolls %>%
filter(start_date > "2019-12-08") %>%
select(start_date,pct,state,candidate)
primaryPolls %>% mutate(proportion <- pct/100)
# Define path to the data
dataURL <- 'https://jmontgomery.github.io/PDS/Datasets/president_primary_polls_feb2020.csv'
# Load the data
primaryPolls<-read_csv(dataURL)
# Format the date
primaryPolls$start_date<-as.Date(primaryPolls$start_date, "%m/%d/%y")
primaryPolls %>%
filter(start_date > "2019-12-08") %>%
select(start_date,pct,state,candidate)
primaryPolls %>%
filter(start_date > "2019-12-08") %>%
select(start_date,pct,state,candidate_name)
primaryPolls %>% mutate(proportion <- pct/100)
primaryPolls %>%
group_by(candidate_name,state)
primaryPolls %>%
group_by(candidate_name,state) %>%
summarise(mean(pct))
primaryPolls %>%
group_by(candidate_name,state) %>%
top_n(10,pct) %>%
summarise(mean(pct))
primaryPolls %>%
top_n(10,pct) %>%
group_by(candidate_name,state) %>%
summarise(mean(pct))
library(tidyverse)
mayors<-read_csv(file="https://raw.githubusercontent.com/jmontgomery/jmontgomery.github.io/master/PDS/Datasets/Mayors.csv")
tweets<-read_csv("~/Dropbox/Classes/PDSBigData/Tweets.csv")
tweets<-read_csv("~/Dropbox/Classes/PDSBigData/Tweets.csv")
print(object.size(mayors), units="auto")
tweets<-read_csv(file="https://github.com/jmontgomery/jmontgomery.github.io/blob/master/PDS/Datasets/Tweets.csv.zip")
library(tidyverse)
mayors<-read_csv(file="https://raw.githubusercontent.com/jmontgomery/jmontgomery.github.io/master/PDS/Datasets/Mayors.csv")
tweets<-read_csv(file="https://github.com/jmontgomery/jmontgomery.github.io/blob/master/PDS/Datasets/Tweets.csv.zip")
library(readr)
Tweets <- read_csv("R/Tweets.csv")
View(Tweets)
library(tidyverse)
mayors<-read_csv(file="https://raw.githubusercontent.com/jmontgomery/jmontgomery.github.io/master/PDS/Datasets/Mayors.csv")
Tweets <- read_csv("R/Tweets.csv")
library(tidyverse)
mayors<-read_csv(file="https://raw.githubusercontent.com/jmontgomery/jmontgomery.github.io/master/PDS/Datasets/Mayors.csv")
Tweets <- read_csv("R/Tweets.csv")
mayors$TwitterHandle[mayors$LastName == "Krewson"]
Tweets <- Tweets[ScreenName == "lydakrewson"]
Tweets <- Tweets[Tweets$ScreenName == "lydakrewson"]
Tweets  %>% filter(ScreenName == "lydakrewson")
Tweets <- Tweets  %>% filter(ScreenName == "lydakrewson")
head(Tweets)
tweet-lists <- str_split(Tweets$Text, pattern = " ")
tweet.lists <- str_split(Tweets$Text, pattern = " ")
tweet.lists
length(Tweets$TweetID)
tweet.lists[[3191]]
tweet.lists[[1]]
length(tweet.lists[[1]])
Tweets$length <- length(tweet.lists)
Tweets$length
Tweets$length <- NA
Tweets$length
for(i in 1:length(tweets.list)){
Tweets$length <- length(tweet.lists[i])
}
for(i in 1:length(tweets.lists)){
Tweets$length <- length(tweet.lists[i])
}
for(i in 1:length(tweet.lists)){
Tweets$length <- length(tweet.lists[i])
}
Tweets$length
for(i in 1:length(tweet.lists)){
Tweets$length
for(i in 1:length(tweet.lists)){
Tweets$length <- length(tweet.lists[[i]])
}
Tweets$length
for(i in 1:length(tweet.lists)){
Tweets$length <- length(tweet.lists[[i]])
}
Tweets$length <- NA
library(tidyverse)
mayors<-read_csv(file="https://raw.githubusercontent.com/jmontgomery/jmontgomery.github.io/master/PDS/Datasets/Mayors.csv")
Tweets <- read_csv("R/Tweets.csv")
mayors<-read_csv(file="https://raw.githubusercontent.com/jmontgomery/jmontgomery.github.io/master/PDS/Datasets/Mayors.csv")
Tweets <- read_csv("R/Tweets.csv")
mayors$TwitterHandle[mayors$LastName == "Krewson"]
Tweets <- Tweets  %>% filter(ScreenName == "lydakrewson")
tweet.lists <- str_split(Tweets$Text, pattern = " ")
Tweets$length <- NA
for(i in 1:length(tweet.lists)){
Tweets$length <- length(tweet.lists[[i]])
}
Tweets$length
Tweets$length <- NA
for(i in 1:length(tweet.lists)){
Tweets$length <- length(tweet.lists[[i]])
}
Tweets$length
for(i in 1:length(tweet.lists)){
Tweets$length[i] <- length(tweet.lists[[i]])
}
Tweets$length
tweet.lists(j)
tweet.lists(1)
tweet.lists[1]
tweet.lists[1][3]
tweet.lists[1][3]
tweet.lists[1][3]
tweet.lists[[1]]
tweet.lists[[1]][3]
tweet.vector <- c()
for(i in 1:length(tweet.lists)){
for(j in 1:length(tweet.lists[i])){
if(tweet.lists[[i]][j]) in tweet.vector{}
else{tweet.vector <- c(tweet.vector, tweet.lists[[i]][j])}
}
}
tweet.vector <- c()
for(i in 1:length(tweet.lists)){
for(j in 1:length(tweet.lists[i])){
if(tweet.lists[[i]][j]) in tweet.vector{print(repeat)}
else{tweet.vector <- c(tweet.vector, tweet.lists[[i]][j])}
}
}
for(i in 1:length(tweet.lists)){
for(j in 1:length(tweet.lists[i])){d
if(tweet.lists[[i]][j]) in tweet.vector){print(repeat)}
else{tweet.vector <- c(tweet.vector, tweet.lists[[i]][j])}
}
}
for(j in 1:length(tweet.lists[i])){d
if(tweet.lists[[i]][j]) in tweet.vector){print(repeat)}
else{tweet.vector <- c(tweet.vector, tweet.lists[[i]][j])}
}
for(i in 1:length(tweet.lists)){
for(j in 1:length(tweet.lists[i])){d
if(tweet.lists[[i]][j]) in tweet.vector){print("hi")}
else{tweet.vector <- c(tweet.vector, tweet.lists[[i]][j])}
}
}
tweet.vector <- c()
for(i in 1:length(tweet.lists)){
for(j in 1:length(tweet.lists[i])){
if(tweet.lists[[i]][j]) in tweet.vector){print("hi")}
else{tweet.vector <- c(tweet.vector, tweet.lists[[i]][j])}
}
}
tweet.vector <- c()
for(i in 1:length(tweet.lists)){
for(j in 1:length(tweet.lists[i])){
if(tweet.lists[[i]][j]) !%in tweet.vector){tweet.vector <- c(tweet.vector, tweet.lists[[i]][j])}
}
}
for(i in 1:length(tweet.lists)){
for(j in 1:length(tweet.lists[i])){
if(tweet.lists[[i]][j]) !%in% tweet.vector){
tweet.vector <- c(tweet.vector, tweet.lists[[i]][j])}
}
}
a <- c(1,3,5)
3 %in% a
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
> file.path(R.home("bin"), "R")
file.path(R.home("bin"), "R")
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${C:/PROGRA~1/R/R-41~1.1/bin/x64/}"', file = "~/.Renviron", append = TRUE)
install.packages("jsonlite", type = "source")
library(dataverse)
library(AER)
library(tidyverse)
# Helper function from `dataverse` documentation to read in data from dataverse
load_object <- function(file) {
tmp <- new.env()
load(file = file, envir = tmp)
tmp[[ls(tmp)[1]]]
}
# Read in White (2019) data, takes a few seconds to load; df will be called 'voter1'
voter1 <- get_dataframe_by_id(
file = 'doi:10.7910/DVN/TWVXKZ/TMJQLL',
server = "dataverse.harvard.edu",
.f = load_object,
original = TRUE)
# Read in White (2019) data, takes a few seconds to load; df will be called 'voter1'
voter1 <- get_dataframe_by_id(
file = 'doi:10.7910/DVN/TWVXKZ/TMJQLL',
server = "dataverse.harvard.edu",
.f = load_object,
original = TRUE)
# Read in White (2019) data, takes a few seconds to load; df will be called 'voter1'
voter1 <- get_dataframe_by_id(
file = 'doi:10.7910/DVN/TWVXKZ/TMJQLL',
server = "dataverse.harvard.edu",
.f = load_object,
original = TRUE)
# Helper function from `dataverse` documentation to read in data from dataverse
load_object <- function(file) {
tmp <- new.env()
load(file = file, envir = tmp)
tmp[[ls(tmp)[1]]]
}
# Read in White (2019) data, takes a few seconds to load; df will be called 'voter1'
voter1 <- get_dataframe_by_id(
file = 'doi:10.7910/DVN/TWVXKZ/TMJQLL',
server = "dataverse.harvard.edu",
.f = load_object,
original = TRUE)
library(dataverse)
library(AER)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
# Read in White (2019) data, takes a few seconds to load; df will be called 'voter1'
voter1 <- get_dataframe_by_id(
file = 'doi:10.7910/DVN/TWVXKZ/TMJQLL',
server = "dataverse.harvard.edu",
.f = load_object,
original = TRUE)
install.packages("stats")
library(tidyverse)
library(stats)
load("C:/Users/jordo/Downloads/defendants_voter1_deidentified.Rdata")
reg1 <- lm(jail ~ vote2012 + crtjaiilavg1 + fyear + black, data = voter1)
writeLines('PATH="C:\rtools40\usr\bin;${PATH}"', con = "~/.Renviron"
writeLines('PATH="C:\rtools40\usr\bin;${PATH}"', con = "~/.Renviron")
writeLines('PATH="C:\rtools40\usr\bin;${PATH}"', con = "~\.Renviron")
writeLines('PATH="C:/rtools40/usr/bin;${PATH}"', con = "~/.Renviron")
library(stats)
writeLines('PATH="C:/rtools40/usr/bin;${PATH}"', con = "~/.Renviron")
library(tidyverse)
library(dataverse)
library(AER)
# Read in White (2019) data, takes a few seconds to load; df will be called 'voter1'
voter1 <- get_dataframe_by_id(
file = 'doi:10.7910/DVN/TWVXKZ/TMJQLL',
server = "dataverse.harvard.edu",
.f = load_object,
original = TRUE)
# Read in White (2019) data, takes a few seconds to load; df will be called 'voter1'
voter2 <- get_dataframe_by_id(
file = 'doi:10.7910/DVN/TWVXKZ/TMJQLL',
server = "dataverse.harvard.edu",
.f = load_object,
original = TRUE)
reg1 <- lm(jail ~ vote2012 + crtjaiilavg1 + fyear + black, data = voter1)
reg1 <- lm(jail ~ vote2012 + crtjailavg1 + fyear + black, data = voter1)
View(voter1)
setwd("C:/Users/jordo/Documents/GitHub/AppliedStatisticalProgramming2022/integrateIt/")
rm(list=ls())
source("integrateIt.R")
source("integrate_it_classes.R")
i
source("integrate_it_classes.R")
source("integrate_it_classes.R")
source("integrate_it_classes.R")
source("integrate_it_classes.R")
package.skeleton(name = "integrateIt",
list = c("integrateIt/",  "integrate_it_classes"))
package.skeleton(name = "integrateIt",
list = c("integrateIt",  "integrate_it_classes"))
source("integrate_it_classes.R")
getwd()
setwd("C:/Users/jordo/Documents/GitHub/AppliedStatisticalProgramming2022/integrateIt/") #This will need to be changed to match your directory
current.code <- as.package("integrateIt")
library(roxygen2)
## Load libraries and set working directory
library(devtools)
current.code <- as.package("integrateIt")
funct <- function(x){return(x^2)}
test <- integrateIt(10,funct,c(0,11),"Trapezoid")
current.code <- as.package("integrateIt")
funct <- function(x){return(x^2)}
test <- integrateIt(10,funct,c(0,11),"Trapezoid")
setwd("C:/Users/jordo/Documents/GitHub/AppliedStatisticalProgramming2022/integrateIt/") #This will need to be changed to match your directory
current.code <- as.package("integrateIt")
funct <- function(x){return(x^2)}
test <- integrateIt(10,funct,c(0,11),"Trapezoid")
current.code <- as.package("integrateIt")
test <- integrateIt(10,funct,c(0,11),"Trapezoid")
setwd("C:/Users/jordo/Documents/GitHub/AppliedStatisticalProgramming2022/integrateIt/integrateIt") #This will need to be changed to match your directory
current.code <- as.package("integrateIt")
setwd("C:/Users/jordo/Documents/GitHub/AppliedStatisticalProgramming2022/integrateIt/") #This will need to be changed to match your directory
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
test <- integrateIt(10,funct,c(0,11),"Trapezoid")
test$Integral_object@xvals
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
setwd("C:/Users/jordo/Documents/GitHub/AppliedStatisticalProgramming2022/integrateIt/") #This will need to be changed to match your directory
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
funct <- function(x){return(x^2)}
test <- integrateIt(10,funct,c(0,11),"Trapezoid")
test$Integral_object@xvals
test
document(current.code)
document(current.code)
check(current.code)
getwd()
setwd("C:/Users/jordo/Documents/GitHub/AppliedStatisticalProgramming2022/") #This will need to be changed to match your directory
setwd("C:/Users/jordo/Documents/GitHub/AppliedStatisticalProgramming2022/integrateIt") #This will need to be changed to match your directory
current.code <- as.package("integrateIt")
setwd("C:/Users/jordo/Documents/GitHub/AppliedStatisticalProgramming2022/integrateIt/integrateIt") #This will need to be changed to match your directory
current.code <- as.package("integrateIt")
load_all(current.code)
current.code <- as.package("integrateIt")
setwd("C:/Users/jordo/Documents/GitHub/AppliedStatisticalProgramming2022/integrateIt/") #This will need to be changed to match your directory
rm(list=ls())
source("integrateIt.R")
source("integrate_it_classes.R")
package.skeleton(name = "integratePack",
list = c("integrateIt","integrate_it_classes"))
setwd("C:/Users/jordo/Documents/GitHub/AppliedStatisticalProgramming2022/integrateIt/") #This will need to be changed to match your directory
setwd("C:/Users/jordo/Documents/GitHub/AppliedStatisticalProgramming2022/integrateIt/") #This will need to be changed to match your directory
current.code <- as.package("integrateIt")
load_all(current.code)
rm(list=ls())
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
load_all(current.code)
warnings()
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
check(current.code)
funct <- function(x){return(x^2)}
test <- integrateIt(10,funct,c(0,11),"Trapezoid")
test
roxygenize()
roxygenize("C:/Users/jordo/Documents/GitHub/AppliedStatisticalProgramming2022/integrateIt/")
roxygenize("C:/Users/jordo/Documents/GitHub/AppliedStatisticalProgramming2022/integrateIt/integrateIt")
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
check(current.code)
library(methods)
current.code <- as.package("integrateIt")
load_all(current.code)
check(current.code)
library(methods)
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
check(current.code)
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
check(current.code)
current.code <- as.package("integrateIt")
setwd("C:/Users/jordo/Documents/GitHub/AppliedStatisticalProgramming2022/integrateIt/") #This will need to be changed to match your directory
rm(list=ls())
source("integrateIt.R")
source("integrate_it_classes.R")
package.skeleton(name = "integratePack",
list = c("integrateIt","integrate_it_classes"))
rm(list=ls())
source("integrateIt.R")
source("integrate_it_classes.R")
package.skeleton(name = "integrateIt",
list = c("integrateIt","integrate_it_classes"))
rm(list=ls())
setwd("C:/Users/jordo/Documents/GitHub/AppliedStatisticalProgramming2022/integrateIt/") #This will need to be changed to match your directory
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
document(current.code)
check(current.code)
roxygenize("C:/Users/jordo/Documents/GitHub/AppliedStatisticalProgramming2022/integrateIt/integrateIt")
current.code <- as.package("integrateIt")
rm(list=ls())
setwd("C:/Users/jordo/Documents/GitHub/AppliedStatisticalProgramming2022/integrateIt/") #This will need to be changed to match your directory
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
rm(list=ls())
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
check(current.code)
rm(list=ls())
getwd()
source("integrateIt.R")
source("integrate_it_classes.R")
source("Simpson_printer.R")
source("Trapezoid_printer.R")
package.skeleton(name = "integrateIt",
list = c("integrateIt","integrate_it_classes","Simpson_printer","Trapezoid_printer"))
current.code <- as.package("integrateIt")
load_all(current.code)
rm(list=ls())
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
check(current.code)
document(current.code)
